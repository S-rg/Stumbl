User User::registerUser() {
    string name, password, pronouns, bio, inp;
    int age, gender, mode, uniId, majorId;
    bitset<5> studyTimes;
    bitset<7> studyDays;

    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    cout << "Enter name: ";
    getline(cin, name);

    cout << "\nEnter password: ";
    getline(cin,password);

    cout << "\nEnter pronouns: ";
    getline(cin, pronouns);

    cout << "\nEnter bio: ";
    getline(cin, bio);

    age = -1;
    while (age < 0) {
        cout << "\nEnter age: ";
        cin >> age;
        if (age < 0) {
            cout << "Invalid input. Please enter a valid age: ";
        }
    }

    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    gender = -1;
    while (gender == -1) {
        cout << "\nEnter gender (M/F/NB): ";
        cin >> inp;
        //tolower(inp);
        if (inp == "m" || inp == "male") { 
            gender = 0; 
        } else if (inp == "f" || inp == "female") {
            gender = 1;
        } else if (inp == "nb" || inp == "non-binary") {
            gender = 2;
        } else {cout << "Invalid input. Please enter M, F, or NB.\n";}
    }

    mode = -1;
    while (mode == -1) {
        cout << "\nEnter mode (Online/Offline): ";
        cin >> inp;
        //tolower(inp);
        if (inp == "online" || inp == "on") {mode = 0; }
        else if (inp == "offline" || inp == "off") {mode = 1;}
        else {cout << "Invalid input. Please enter Online or Offline.\n";}
    }


    cout << "\nEnter University Name: ";
    cin >> inp;
    //Input Sanitation
    uniId = uni_map[inp];

    cout << "\nEnter Major Name: ";
    cin >> inp;
    //Input Sanitation
    majorId = major_map[inp];

    cout << "\nEnter study days per week: ";
    inp = "";
    for (int i = 0; i < 7; i++) {
        char response;

        cout << "Do you study on " << days_list[i] << "? (y/n): ";
        cin >> response;

        if (response == 'y' || response == 'Y') {

            if (!inp.empty()) {
                inp += ",";
            }
            inp += time_list[i];
        }
    }
    studyTimes = timesToBitset(inp);

    User newUser(name, password, pronouns, bio, age, gender, mode, uniId, majorId, studyDays, studyTimes);
    newUser.writeToCSV();
    return newUser;
}
